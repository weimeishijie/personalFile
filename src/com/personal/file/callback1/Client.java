package com.personal.file.callback1;

/**
 * 测试代码类
 */
public class Client {
    public static void main(String[] args) {

        Employee employee = new Employee();
        //将回调对象（上层对象）传入，注册
        employee.setCallBack(new Boss());
        //开启控制器对象运行
        employee.doSome();
    }
}

/**
 * 看了上面的例子，有的人可能认为，这不是面向接口的编程吗？
 * 怎么会是回调，你再好好想想，咱们面向接口的编程的调用关系？
 * 在三层中，当业务层调用数据层时，是不需要把业务层自身传递到数据层的，
 * 并且这是一种上层调用下层的关系，比如我们在用框架的时候，
 * 一般直接调用框架提供的API就可以了，但回调不同，当框架不能满足需求，
 * 我们想让框架来调用自己的类方法，怎么做呢？总不至于去修改框架吧。
 * 许多优秀的框架提几乎都供了相关的接口，我们只需要实现相关接口，
 * 即可完成了注册，然后在合适的时候让框架来调用我们自己的类，
 * 还记不记得我们在使用Struts时，当我们编写Action时，
 * 就需要继承Action类，然后实现execute()方法，
 * 在execute()方法中写咱们自己的业务逻辑代码，完成对用户请求的处理。
 * 由此可以猜测，框架和容器中会提供大量的回调接口，以满足个性化的定制。
 */
